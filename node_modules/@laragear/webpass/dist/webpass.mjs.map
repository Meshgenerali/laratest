{"version":3,"file":"webpass.mjs","sources":["../src/browser.ts","../src/utils.ts","../src/config.ts","../node_modules/destr/dist/index.mjs","../node_modules/ufo/dist/index.mjs","../node_modules/ofetch/dist/shared/ofetch.00501375.mjs","../node_modules/ofetch/dist/index.mjs","../src/wfetch.ts","../src/csrf.ts","../src/webpass.ts"],"sourcesContent":["/**\n * Check if the browser supports WebAuthn\n *\n * @return {boolean}\n */\nexport async function isSupported(): Promise<boolean> {\n    const callback = window.PublicKeyCredential?.isUserVerifyingPlatformAuthenticatorAvailable\n        ?? (async () => false)\n\n    return await callback()\n}\n\n/**\n * Check if the browser doesn't support WebAuthn\n */\nexport async function isNotSupported(): Promise<boolean> {\n    return ! await isSupported()\n}\n\n/**\n * Check if the browser doesn't support WebAuthn\n */\nexport async function isUnsupported(): Promise<boolean> {\n    return ! await isSupported()\n}\n\n/**\n * Check if the browser can immediately authenticate without picking credentials.\n */\nexport async function isAutomatic(): Promise<boolean> {\n    return await isSupported()\n        && await (window.PublicKeyCredential.isConditionalMediationAvailable ?? (async () => false))()\n}\n\n/**\n * Check if the browser cannot immediately authenticate without picking credentials.\n */\nexport async function isNotAutomatic(): Promise<boolean> {\n    return ! await isAutomatic()\n}\n\n/**\n * Check if the browser cannot immediately authenticate without picking credentials.\n */\nexport async function isManual(): Promise<boolean> {\n    return ! await isAutomatic()\n}\n","import {CeremonyOptions, CeremonyOptionsWithoutPath, Config} from \"./types\"\n\n/**\n * Extracts a single key for the object.\n */\nexport function pull<T extends Record<string, any>, K extends keyof T>(object: T, key: K): T[K] {\n    const extracted = object[key]\n\n    delete object[key]\n\n    return extracted\n}\n\n/**\n * Return all object keys except the ones issued.\n */\nexport function except<T extends Record<string, any>, K extends Array<keyof T>>(object: T, ...keys: K): Partial<T> {\n    const result: Partial<T> = {};\n\n    const allKeys = Object.keys(object) as K\n\n    for (const key of allKeys) {\n        if (!keys.includes(key)) {\n            result[key] = object[key];\n        }\n    }\n\n    return result;\n}\n\n/**\n * Check if a value is an Array Buffer, like an Uint8Array, or a plain array\n */\nexport function isArrayBuffer(value: any): boolean {\n    return typeof value === \"object\"\n        && (\n            value instanceof ArrayBuffer ||\n            value instanceof Uint8Array ||\n            (Array.isArray(value) && typeof value[0] === \"number\")\n        )\n}\n\n/**\n * Check if an object is a non-empty object.\n */\nexport function isObjectEmpty(value: any): boolean {\n    return typeof value === \"object\" && !Object.keys(value).length\n}\n\n/**\n * Deeply merge an object with another object.\n */\nexport function mergeDeep<T extends Record<string, any>, S extends Record<string, any>>(target: T, source: S): T & S {\n    if (!isObject(target)) {\n        return mergeDeep({}, source) as T & S\n    }\n\n    const output: Record<string, any> = Object.assign({}, target)\n\n    if (isObject(source)) {\n        Object.keys(source).forEach((key: string): void => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, {[key]: source[key]})\n                } else {\n                    output[key] = mergeDeep(target[key], source[key])\n                }\n            } else {\n                Object.assign(output, {[key]: source[key]})\n            }\n        })\n    }\n\n    return output as T & S\n}\n\n/**\n * Check if the value is an object\n */\nfunction isObject(obj: any): boolean {\n    return obj !== null && !Array.isArray(obj) && typeof obj === \"object\" && typeof obj !== \"function\"\n}\n\n/**\n * Normalize the Ceremony options to something fetch-able.\n */\nexport function normalizeOptions(\n    options: CeremonyOptionsWithoutPath | string | undefined | null,\n    config: Config,\n    defaultPathKey: keyof typeof config.routes\n): CeremonyOptions {\n    // If the options are empty, create a string with the default route\n    if (!options) {\n        options = config.routes[defaultPathKey]\n    }\n\n    // If the option is a string, create an object with the string as path\n    if (typeof options === \"string\") {\n        options = { path: options }\n    }\n\n    // If the path in the object is empty, assign it the default route\n    options.path = options.path || config.routes[defaultPathKey]\n    options.baseURL = options.baseURL || config.baseURL || window.location.origin\n\n    // Set the defaults for the object if these are \"falsy\"\n    options.body = options.body || {}\n    options.method = options.method || config.method\n    options.headers = options.headers || config.headers\n    options.redirect = options.redirect || config.redirect\n    options.credentials = options.credentials || config.credentials\n\n    return options as CeremonyOptions\n}\n","import type {Config} from \"./types\"\n\n/**\n * Default configuration.\n *\n * @type {Config}\n */\nexport default {\n    method: \"post\",\n    redirect: \"error\",\n    baseURL: undefined,\n    findCsrfToken: false,\n    findXsrfToken: false,\n    routes: {\n        attestOptions: \"/auth/attest-options\",\n        attest: \"/auth/attest\",\n        assertOptions: \"/auth/assert-options\",\n        assert: \"/auth/assert\",\n    },\n    headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n    },\n    credentials: \"same-origin\",\n} as Config\n","const suspectProtoRx = /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/;\nconst suspectConstructorRx = /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/;\nconst JsonSigRx = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nfunction jsonParseTransform(key, value) {\n  if (key === \"__proto__\" || key === \"constructor\" && value && typeof value === \"object\" && \"prototype\" in value) {\n    warnKeyDropped(key);\n    return;\n  }\n  return value;\n}\nfunction warnKeyDropped(key) {\n  console.warn(`[destr] Dropping \"${key}\" key to prevent prototype pollution.`);\n}\nfunction destr(value, options = {}) {\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  const _value = value.trim();\n  if (\n    // eslint-disable-next-line unicorn/prefer-at\n    value[0] === '\"' && value.at(-1) === '\"' && !value.includes(\"\\\\\")\n  ) {\n    return _value.slice(1, -1);\n  }\n  if (_value.length <= 9) {\n    const _lval = _value.toLowerCase();\n    if (_lval === \"true\") {\n      return true;\n    }\n    if (_lval === \"false\") {\n      return false;\n    }\n    if (_lval === \"undefined\") {\n      return void 0;\n    }\n    if (_lval === \"null\") {\n      return null;\n    }\n    if (_lval === \"nan\") {\n      return Number.NaN;\n    }\n    if (_lval === \"infinity\") {\n      return Number.POSITIVE_INFINITY;\n    }\n    if (_lval === \"-infinity\") {\n      return Number.NEGATIVE_INFINITY;\n    }\n  }\n  if (!JsonSigRx.test(value)) {\n    if (options.strict) {\n      throw new SyntaxError(\"[destr] Invalid JSON\");\n    }\n    return value;\n  }\n  try {\n    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {\n      if (options.strict) {\n        throw new Error(\"[destr] Possible prototype pollution\");\n      }\n      return JSON.parse(value, jsonParseTransform);\n    }\n    return JSON.parse(value);\n  } catch (error) {\n    if (options.strict) {\n      throw error;\n    }\n    return value;\n  }\n}\nfunction safeDestr(value, options = {}) {\n  return destr(value, { ...options, strict: true });\n}\n\nexport { destr as default, destr, safeDestr };\n","const n = /[^\\0-\\x7E]/;\nconst t = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\nconst o = {\n  overflow: \"Overflow Error\",\n  \"not-basic\": \"Illegal Input\",\n  \"invalid-input\": \"Invalid Input\"\n};\nconst e = Math.floor;\nconst r = String.fromCharCode;\nfunction s(n2) {\n  throw new RangeError(o[n2]);\n}\nconst c = function(n2, t2) {\n  return n2 + 22 + 75 * (n2 < 26) - ((t2 != 0) << 5);\n};\nconst u = function(n2, t2, o2) {\n  let r2 = 0;\n  for (n2 = o2 ? e(n2 / 700) : n2 >> 1, n2 += e(n2 / t2); n2 > 455; r2 += 36) {\n    n2 = e(n2 / 35);\n  }\n  return e(r2 + 36 * n2 / (n2 + 38));\n};\nfunction toASCII(o2) {\n  return function(n2, o3) {\n    const e2 = n2.split(\"@\");\n    let r2 = \"\";\n    e2.length > 1 && (r2 = e2[0] + \"@\", n2 = e2[1]);\n    const s2 = function(n3, t2) {\n      const o4 = [];\n      let e3 = n3.length;\n      for (; e3--; ) {\n        o4[e3] = t2(n3[e3]);\n      }\n      return o4;\n    }((n2 = n2.replace(t, \".\")).split(\".\"), o3).join(\".\");\n    return r2 + s2;\n  }(o2, function(t2) {\n    return n.test(t2) ? \"xn--\" + function(n2) {\n      const t3 = [];\n      const o3 = (n2 = function(n3) {\n        const t4 = [];\n        let o4 = 0;\n        const e2 = n3.length;\n        for (; o4 < e2; ) {\n          const r2 = n3.charCodeAt(o4++);\n          if (r2 >= 55296 && r2 <= 56319 && o4 < e2) {\n            const e3 = n3.charCodeAt(o4++);\n            (64512 & e3) == 56320 ? t4.push(((1023 & r2) << 10) + (1023 & e3) + 65536) : (t4.push(r2), o4--);\n          } else {\n            t4.push(r2);\n          }\n        }\n        return t4;\n      }(n2)).length;\n      let f = 128;\n      let i = 0;\n      let l = 72;\n      for (const o4 of n2) {\n        o4 < 128 && t3.push(r(o4));\n      }\n      const h = t3.length;\n      let p = h;\n      for (h && t3.push(\"-\"); p < o3; ) {\n        let o4 = 2147483647;\n        for (const t4 of n2) {\n          t4 >= f && t4 < o4 && (o4 = t4);\n        }\n        const a = p + 1;\n        o4 - f > e((2147483647 - i) / a) && s(\"overflow\"), i += (o4 - f) * a, f = o4;\n        for (const o5 of n2) {\n          if (o5 < f && ++i > 2147483647 && s(\"overflow\"), o5 == f) {\n            let n3 = i;\n            for (let o6 = 36; ; o6 += 36) {\n              const s2 = o6 <= l ? 1 : o6 >= l + 26 ? 26 : o6 - l;\n              if (n3 < s2) {\n                break;\n              }\n              const u2 = n3 - s2;\n              const f2 = 36 - s2;\n              t3.push(r(c(s2 + u2 % f2, 0))), n3 = e(u2 / f2);\n            }\n            t3.push(r(c(n3, 0))), l = u(i, a, p == h), i = 0, ++p;\n          }\n        }\n        ++i, ++f;\n      }\n      return t3.join(\"\");\n    }(t2) : t2;\n  });\n}\n\nconst HASH_RE = /#/g;\nconst AMPERSAND_RE = /&/g;\nconst SLASH_RE = /\\//g;\nconst EQUAL_RE = /=/g;\nconst IM_RE = /\\?/g;\nconst PLUS_RE = /\\+/g;\nconst ENC_CARET_RE = /%5e/gi;\nconst ENC_BACKTICK_RE = /%60/gi;\nconst ENC_CURLY_OPEN_RE = /%7b/gi;\nconst ENC_PIPE_RE = /%7c/gi;\nconst ENC_CURLY_CLOSE_RE = /%7d/gi;\nconst ENC_SPACE_RE = /%20/gi;\nconst ENC_SLASH_RE = /%2f/gi;\nconst ENC_ENC_SLASH_RE = /%252f/gi;\nfunction encode(text) {\n  return encodeURI(\"\" + text).replace(ENC_PIPE_RE, \"|\");\n}\nfunction encodeHash(text) {\n  return encode(text).replace(ENC_CURLY_OPEN_RE, \"{\").replace(ENC_CURLY_CLOSE_RE, \"}\").replace(ENC_CARET_RE, \"^\");\n}\nfunction encodeQueryValue(input) {\n  return encode(typeof input === \"string\" ? input : JSON.stringify(input)).replace(PLUS_RE, \"%2B\").replace(ENC_SPACE_RE, \"+\").replace(HASH_RE, \"%23\").replace(AMPERSAND_RE, \"%26\").replace(ENC_BACKTICK_RE, \"`\").replace(ENC_CARET_RE, \"^\");\n}\nfunction encodeQueryKey(text) {\n  return encodeQueryValue(text).replace(EQUAL_RE, \"%3D\");\n}\nfunction encodePath(text) {\n  return encode(text).replace(HASH_RE, \"%23\").replace(IM_RE, \"%3F\").replace(ENC_ENC_SLASH_RE, \"%2F\").replace(AMPERSAND_RE, \"%26\").replace(PLUS_RE, \"%2B\");\n}\nfunction encodeParam(text) {\n  return encodePath(text).replace(SLASH_RE, \"%2F\");\n}\nfunction decode(text = \"\") {\n  try {\n    return decodeURIComponent(\"\" + text);\n  } catch {\n    return \"\" + text;\n  }\n}\nfunction decodePath(text) {\n  return decode(text.replace(ENC_SLASH_RE, \"%252F\"));\n}\nfunction decodeQueryKey(text) {\n  return decode(text.replace(PLUS_RE, \" \"));\n}\nfunction decodeQueryValue(text) {\n  return decode(text.replace(PLUS_RE, \" \"));\n}\nfunction encodeHost(name = \"\") {\n  return toASCII(name);\n}\n\nfunction parseQuery(parametersString = \"\") {\n  const object = {};\n  if (parametersString[0] === \"?\") {\n    parametersString = parametersString.slice(1);\n  }\n  for (const parameter of parametersString.split(\"&\")) {\n    const s = parameter.match(/([^=]+)=?(.*)/) || [];\n    if (s.length < 2) {\n      continue;\n    }\n    const key = decodeQueryKey(s[1]);\n    if (key === \"__proto__\" || key === \"constructor\") {\n      continue;\n    }\n    const value = decodeQueryValue(s[2] || \"\");\n    if (object[key] === void 0) {\n      object[key] = value;\n    } else if (Array.isArray(object[key])) {\n      object[key].push(value);\n    } else {\n      object[key] = [object[key], value];\n    }\n  }\n  return object;\n}\nfunction encodeQueryItem(key, value) {\n  if (typeof value === \"number\" || typeof value === \"boolean\") {\n    value = String(value);\n  }\n  if (!value) {\n    return encodeQueryKey(key);\n  }\n  if (Array.isArray(value)) {\n    return value.map((_value) => `${encodeQueryKey(key)}=${encodeQueryValue(_value)}`).join(\"&\");\n  }\n  return `${encodeQueryKey(key)}=${encodeQueryValue(value)}`;\n}\nfunction stringifyQuery(query) {\n  return Object.keys(query).filter((k) => query[k] !== void 0).map((k) => encodeQueryItem(k, query[k])).filter(Boolean).join(\"&\");\n}\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass $URL {\n  constructor(input = \"\") {\n    __publicField(this, \"protocol\");\n    __publicField(this, \"host\");\n    __publicField(this, \"auth\");\n    __publicField(this, \"pathname\");\n    __publicField(this, \"query\", {});\n    __publicField(this, \"hash\");\n    if (typeof input !== \"string\") {\n      throw new TypeError(\n        `URL input should be string received ${typeof input} (${input})`\n      );\n    }\n    const parsed = parseURL(input);\n    this.protocol = decode(parsed.protocol);\n    this.host = decode(parsed.host);\n    this.auth = decode(parsed.auth);\n    this.pathname = decodePath(parsed.pathname);\n    this.query = parseQuery(parsed.search);\n    this.hash = decode(parsed.hash);\n  }\n  get hostname() {\n    return parseHost(this.host).hostname;\n  }\n  get port() {\n    return parseHost(this.host).port || \"\";\n  }\n  get username() {\n    return parseAuth(this.auth).username;\n  }\n  get password() {\n    return parseAuth(this.auth).password || \"\";\n  }\n  get hasProtocol() {\n    return this.protocol.length;\n  }\n  get isAbsolute() {\n    return this.hasProtocol || this.pathname[0] === \"/\";\n  }\n  get search() {\n    const q = stringifyQuery(this.query);\n    return q.length > 0 ? \"?\" + q : \"\";\n  }\n  get searchParams() {\n    const p = new URLSearchParams();\n    for (const name in this.query) {\n      const value = this.query[name];\n      if (Array.isArray(value)) {\n        for (const v of value) {\n          p.append(name, v);\n        }\n      } else {\n        p.append(\n          name,\n          typeof value === \"string\" ? value : JSON.stringify(value)\n        );\n      }\n    }\n    return p;\n  }\n  get origin() {\n    return (this.protocol ? this.protocol + \"//\" : \"\") + encodeHost(this.host);\n  }\n  get fullpath() {\n    return encodePath(this.pathname) + this.search + encodeHash(this.hash);\n  }\n  get encodedAuth() {\n    if (!this.auth) {\n      return \"\";\n    }\n    const { username, password } = parseAuth(this.auth);\n    return encodeURIComponent(username) + (password ? \":\" + encodeURIComponent(password) : \"\");\n  }\n  get href() {\n    const auth = this.encodedAuth;\n    const originWithAuth = (this.protocol ? this.protocol + \"//\" : \"\") + (auth ? auth + \"@\" : \"\") + encodeHost(this.host);\n    return this.hasProtocol && this.isAbsolute ? originWithAuth + this.fullpath : this.fullpath;\n  }\n  append(url) {\n    if (url.hasProtocol) {\n      throw new Error(\"Cannot append a URL with protocol\");\n    }\n    Object.assign(this.query, url.query);\n    if (url.pathname) {\n      this.pathname = withTrailingSlash(this.pathname) + withoutLeadingSlash(url.pathname);\n    }\n    if (url.hash) {\n      this.hash = url.hash;\n    }\n  }\n  toJSON() {\n    return this.href;\n  }\n  toString() {\n    return this.href;\n  }\n}\n\nfunction isRelative(inputString) {\n  return [\"./\", \"../\"].some((string_) => inputString.startsWith(string_));\n}\nconst PROTOCOL_STRICT_REGEX = /^[\\s\\w\\0+.-]{2,}:([/\\\\]{1,2})/;\nconst PROTOCOL_REGEX = /^[\\s\\w\\0+.-]{2,}:([/\\\\]{2})?/;\nconst PROTOCOL_RELATIVE_REGEX = /^([/\\\\]\\s*){2,}[^/\\\\]/;\nfunction hasProtocol(inputString, opts = {}) {\n  if (typeof opts === \"boolean\") {\n    opts = { acceptRelative: opts };\n  }\n  if (opts.strict) {\n    return PROTOCOL_STRICT_REGEX.test(inputString);\n  }\n  return PROTOCOL_REGEX.test(inputString) || (opts.acceptRelative ? PROTOCOL_RELATIVE_REGEX.test(inputString) : false);\n}\nconst PROTOCOL_SCRIPT_RE = /^[\\s\\0]*(blob|data|javascript|vbscript):$/i;\nfunction isScriptProtocol(protocol) {\n  return !!protocol && PROTOCOL_SCRIPT_RE.test(protocol);\n}\nconst TRAILING_SLASH_RE = /\\/$|\\/\\?|\\/#/;\nfunction hasTrailingSlash(input = \"\", respectQueryAndFragment) {\n  if (!respectQueryAndFragment) {\n    return input.endsWith(\"/\");\n  }\n  return TRAILING_SLASH_RE.test(input);\n}\nfunction withoutTrailingSlash(input = \"\", respectQueryAndFragment) {\n  if (!respectQueryAndFragment) {\n    return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || \"/\";\n  }\n  if (!hasTrailingSlash(input, true)) {\n    return input || \"/\";\n  }\n  let path = input;\n  let fragment = \"\";\n  const fragmentIndex = input.indexOf(\"#\");\n  if (fragmentIndex >= 0) {\n    path = input.slice(0, fragmentIndex);\n    fragment = input.slice(fragmentIndex);\n  }\n  const [s0, ...s] = path.split(\"?\");\n  return (s0.slice(0, -1) || \"/\") + (s.length > 0 ? `?${s.join(\"?\")}` : \"\") + fragment;\n}\nfunction withTrailingSlash(input = \"\", respectQueryAndFragment) {\n  if (!respectQueryAndFragment) {\n    return input.endsWith(\"/\") ? input : input + \"/\";\n  }\n  if (hasTrailingSlash(input, true)) {\n    return input || \"/\";\n  }\n  let path = input;\n  let fragment = \"\";\n  const fragmentIndex = input.indexOf(\"#\");\n  if (fragmentIndex >= 0) {\n    path = input.slice(0, fragmentIndex);\n    fragment = input.slice(fragmentIndex);\n    if (!path) {\n      return fragment;\n    }\n  }\n  const [s0, ...s] = path.split(\"?\");\n  return s0 + \"/\" + (s.length > 0 ? `?${s.join(\"?\")}` : \"\") + fragment;\n}\nfunction hasLeadingSlash(input = \"\") {\n  return input.startsWith(\"/\");\n}\nfunction withoutLeadingSlash(input = \"\") {\n  return (hasLeadingSlash(input) ? input.slice(1) : input) || \"/\";\n}\nfunction withLeadingSlash(input = \"\") {\n  return hasLeadingSlash(input) ? input : \"/\" + input;\n}\nfunction cleanDoubleSlashes(input = \"\") {\n  return input.split(\"://\").map((string_) => string_.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n}\nfunction withBase(input, base) {\n  if (isEmptyURL(base) || hasProtocol(input)) {\n    return input;\n  }\n  const _base = withoutTrailingSlash(base);\n  if (input.startsWith(_base)) {\n    return input;\n  }\n  return joinURL(_base, input);\n}\nfunction withoutBase(input, base) {\n  if (isEmptyURL(base)) {\n    return input;\n  }\n  const _base = withoutTrailingSlash(base);\n  if (!input.startsWith(_base)) {\n    return input;\n  }\n  const trimmed = input.slice(_base.length);\n  return trimmed[0] === \"/\" ? trimmed : \"/\" + trimmed;\n}\nfunction withQuery(input, query) {\n  const parsed = parseURL(input);\n  const mergedQuery = { ...parseQuery(parsed.search), ...query };\n  parsed.search = stringifyQuery(mergedQuery);\n  return stringifyParsedURL(parsed);\n}\nfunction getQuery(input) {\n  return parseQuery(parseURL(input).search);\n}\nfunction isEmptyURL(url) {\n  return !url || url === \"/\";\n}\nfunction isNonEmptyURL(url) {\n  return url && url !== \"/\";\n}\nconst JOIN_LEADING_SLASH_RE = /^\\.?\\//;\nfunction joinURL(base, ...input) {\n  let url = base || \"\";\n  for (const segment of input.filter((url2) => isNonEmptyURL(url2))) {\n    if (url) {\n      const _segment = segment.replace(JOIN_LEADING_SLASH_RE, \"\");\n      url = withTrailingSlash(url) + _segment;\n    } else {\n      url = segment;\n    }\n  }\n  return url;\n}\nfunction withHttp(input) {\n  return withProtocol(input, \"http://\");\n}\nfunction withHttps(input) {\n  return withProtocol(input, \"https://\");\n}\nfunction withoutProtocol(input) {\n  return withProtocol(input, \"\");\n}\nfunction withProtocol(input, protocol) {\n  const match = input.match(PROTOCOL_REGEX);\n  if (!match) {\n    return protocol + input;\n  }\n  return protocol + input.slice(match[0].length);\n}\nfunction createURL(input) {\n  return new $URL(input);\n}\nfunction normalizeURL(input) {\n  return createURL(input).toString();\n}\nfunction resolveURL(base, ...input) {\n  const url = createURL(base);\n  for (const index of input.filter((url2) => isNonEmptyURL(url2))) {\n    url.append(createURL(index));\n  }\n  return url.toString();\n}\nfunction isSamePath(p1, p2) {\n  return decode(withoutTrailingSlash(p1)) === decode(withoutTrailingSlash(p2));\n}\nfunction isEqual(a, b, options = {}) {\n  if (!options.trailingSlash) {\n    a = withTrailingSlash(a);\n    b = withTrailingSlash(b);\n  }\n  if (!options.leadingSlash) {\n    a = withLeadingSlash(a);\n    b = withLeadingSlash(b);\n  }\n  if (!options.encoding) {\n    a = decode(a);\n    b = decode(b);\n  }\n  return a === b;\n}\n\nfunction parseURL(input = \"\", defaultProto) {\n  const _specialProtoMatch = input.match(\n    /^[\\s\\0]*(blob:|data:|javascript:|vbscript:)(.*)/i\n  );\n  if (_specialProtoMatch) {\n    const [, _proto, _pathname = \"\"] = _specialProtoMatch;\n    return {\n      protocol: _proto.toLowerCase(),\n      pathname: _pathname,\n      href: _proto + _pathname,\n      auth: \"\",\n      host: \"\",\n      search: \"\",\n      hash: \"\"\n    };\n  }\n  if (!hasProtocol(input, { acceptRelative: true })) {\n    return defaultProto ? parseURL(defaultProto + input) : parsePath(input);\n  }\n  const [, protocol = \"\", auth, hostAndPath = \"\"] = input.replace(/\\\\/g, \"/\").match(/^[\\s\\0]*([\\w+.-]{2,}:)?\\/\\/([^/@]+@)?(.*)/) || [];\n  const [, host = \"\", path = \"\"] = hostAndPath.match(/([^#/?]*)(.*)?/) || [];\n  const { pathname, search, hash } = parsePath(\n    path.replace(/\\/(?=[A-Za-z]:)/, \"\")\n  );\n  return {\n    protocol: protocol.toLowerCase(),\n    auth: auth ? auth.slice(0, Math.max(0, auth.length - 1)) : \"\",\n    host,\n    pathname,\n    search,\n    hash\n  };\n}\nfunction parsePath(input = \"\") {\n  const [pathname = \"\", search = \"\", hash = \"\"] = (input.match(/([^#?]*)(\\?[^#]*)?(#.*)?/) || []).splice(1);\n  return {\n    pathname,\n    search,\n    hash\n  };\n}\nfunction parseAuth(input = \"\") {\n  const [username, password] = input.split(\":\");\n  return {\n    username: decode(username),\n    password: decode(password)\n  };\n}\nfunction parseHost(input = \"\") {\n  const [hostname, port] = (input.match(/([^/:]*):?(\\d+)?/) || []).splice(1);\n  return {\n    hostname: decode(hostname),\n    port\n  };\n}\nfunction stringifyParsedURL(parsed) {\n  const pathname = parsed.pathname || \"\";\n  const search = parsed.search ? (parsed.search.startsWith(\"?\") ? \"\" : \"?\") + parsed.search : \"\";\n  const hash = parsed.hash || \"\";\n  const auth = parsed.auth ? parsed.auth + \"@\" : \"\";\n  const host = parsed.host || \"\";\n  const proto = parsed.protocol ? parsed.protocol + \"//\" : \"\";\n  return proto + auth + host + pathname + search + hash;\n}\nconst FILENAME_STRICT_REGEX = /\\/([^/]+\\.[^/]+)$/;\nconst FILENAME_REGEX = /\\/([^/]+)$/;\nfunction parseFilename(input = \"\", { strict }) {\n  const { pathname } = parseURL(input);\n  const matches = strict ? pathname.match(FILENAME_STRICT_REGEX) : pathname.match(FILENAME_REGEX);\n  return matches ? matches[1] : void 0;\n}\n\nexport { $URL, cleanDoubleSlashes, createURL, decode, decodePath, decodeQueryKey, decodeQueryValue, encode, encodeHash, encodeHost, encodeParam, encodePath, encodeQueryItem, encodeQueryKey, encodeQueryValue, getQuery, hasLeadingSlash, hasProtocol, hasTrailingSlash, isEmptyURL, isEqual, isNonEmptyURL, isRelative, isSamePath, isScriptProtocol, joinURL, normalizeURL, parseAuth, parseFilename, parseHost, parsePath, parseQuery, parseURL, resolveURL, stringifyParsedURL, stringifyQuery, withBase, withHttp, withHttps, withLeadingSlash, withProtocol, withQuery, withTrailingSlash, withoutBase, withoutLeadingSlash, withoutProtocol, withoutTrailingSlash };\n","import destr from 'destr';\nimport { withBase, withQuery } from 'ufo';\n\nclass FetchError extends Error {\n  constructor(message, opts) {\n    super(message, opts);\n    this.name = \"FetchError\";\n    if (opts?.cause && !this.cause) {\n      this.cause = opts.cause;\n    }\n  }\n}\nfunction createFetchError(ctx) {\n  const errorMessage = ctx.error?.message || ctx.error?.toString() || \"\";\n  const method = ctx.request?.method || ctx.options?.method || \"GET\";\n  const url = ctx.request?.url || String(ctx.request) || \"/\";\n  const requestStr = `[${method}] ${JSON.stringify(url)}`;\n  const statusStr = ctx.response ? `${ctx.response.status} ${ctx.response.statusText}` : \"<no response>\";\n  const message = `${requestStr}: ${statusStr}${errorMessage ? ` ${errorMessage}` : \"\"}`;\n  const fetchError = new FetchError(\n    message,\n    ctx.error ? { cause: ctx.error } : void 0\n  );\n  for (const key of [\"request\", \"options\", \"response\"]) {\n    Object.defineProperty(fetchError, key, {\n      get() {\n        return ctx[key];\n      }\n    });\n  }\n  for (const [key, refKey] of [\n    [\"data\", \"_data\"],\n    [\"status\", \"status\"],\n    [\"statusCode\", \"status\"],\n    [\"statusText\", \"statusText\"],\n    [\"statusMessage\", \"statusText\"]\n  ]) {\n    Object.defineProperty(fetchError, key, {\n      get() {\n        return ctx.response && ctx.response[refKey];\n      }\n    });\n  }\n  return fetchError;\n}\n\nconst payloadMethods = new Set(\n  Object.freeze([\"PATCH\", \"POST\", \"PUT\", \"DELETE\"])\n);\nfunction isPayloadMethod(method = \"GET\") {\n  return payloadMethods.has(method.toUpperCase());\n}\nfunction isJSONSerializable(value) {\n  if (value === void 0) {\n    return false;\n  }\n  const t = typeof value;\n  if (t === \"string\" || t === \"number\" || t === \"boolean\" || t === null) {\n    return true;\n  }\n  if (t !== \"object\") {\n    return false;\n  }\n  if (Array.isArray(value)) {\n    return true;\n  }\n  if (value.buffer) {\n    return false;\n  }\n  return value.constructor && value.constructor.name === \"Object\" || typeof value.toJSON === \"function\";\n}\nconst textTypes = /* @__PURE__ */ new Set([\n  \"image/svg\",\n  \"application/xml\",\n  \"application/xhtml\",\n  \"application/html\"\n]);\nconst JSON_RE = /^application\\/(?:[\\w!#$%&*.^`~-]*\\+)?json(;.+)?$/i;\nfunction detectResponseType(_contentType = \"\") {\n  if (!_contentType) {\n    return \"json\";\n  }\n  const contentType = _contentType.split(\";\").shift() || \"\";\n  if (JSON_RE.test(contentType)) {\n    return \"json\";\n  }\n  if (textTypes.has(contentType) || contentType.startsWith(\"text/\")) {\n    return \"text\";\n  }\n  return \"blob\";\n}\nfunction mergeFetchOptions(input, defaults, Headers = globalThis.Headers) {\n  const merged = {\n    ...defaults,\n    ...input\n  };\n  if (defaults?.params && input?.params) {\n    merged.params = {\n      ...defaults?.params,\n      ...input?.params\n    };\n  }\n  if (defaults?.query && input?.query) {\n    merged.query = {\n      ...defaults?.query,\n      ...input?.query\n    };\n  }\n  if (defaults?.headers && input?.headers) {\n    merged.headers = new Headers(defaults?.headers || {});\n    for (const [key, value] of new Headers(input?.headers || {})) {\n      merged.headers.set(key, value);\n    }\n  }\n  return merged;\n}\n\nconst retryStatusCodes = /* @__PURE__ */ new Set([\n  408,\n  // Request Timeout\n  409,\n  // Conflict\n  425,\n  // Too Early\n  429,\n  // Too Many Requests\n  500,\n  // Internal Server Error\n  502,\n  // Bad Gateway\n  503,\n  // Service Unavailable\n  504\n  //  Gateway Timeout\n]);\nconst nullBodyResponses = /* @__PURE__ */ new Set([101, 204, 205, 304]);\nfunction createFetch(globalOptions = {}) {\n  const {\n    fetch = globalThis.fetch,\n    Headers = globalThis.Headers,\n    AbortController = globalThis.AbortController\n  } = globalOptions;\n  async function onError(context) {\n    const isAbort = context.error && context.error.name === \"AbortError\" && !context.options.timeout || false;\n    if (context.options.retry !== false && !isAbort) {\n      let retries;\n      if (typeof context.options.retry === \"number\") {\n        retries = context.options.retry;\n      } else {\n        retries = isPayloadMethod(context.options.method) ? 0 : 1;\n      }\n      const responseCode = context.response && context.response.status || 500;\n      if (retries > 0 && (Array.isArray(context.options.retryStatusCodes) ? context.options.retryStatusCodes.includes(responseCode) : retryStatusCodes.has(responseCode))) {\n        const retryDelay = context.options.retryDelay || 0;\n        if (retryDelay > 0) {\n          await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        }\n        return $fetchRaw(context.request, {\n          ...context.options,\n          retry: retries - 1,\n          timeout: context.options.timeout\n        });\n      }\n    }\n    const error = createFetchError(context);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(error, $fetchRaw);\n    }\n    throw error;\n  }\n  const $fetchRaw = async function $fetchRaw2(_request, _options = {}) {\n    const context = {\n      request: _request,\n      options: mergeFetchOptions(_options, globalOptions.defaults, Headers),\n      response: void 0,\n      error: void 0\n    };\n    context.options.method = context.options.method?.toUpperCase();\n    if (context.options.onRequest) {\n      await context.options.onRequest(context);\n    }\n    if (typeof context.request === \"string\") {\n      if (context.options.baseURL) {\n        context.request = withBase(context.request, context.options.baseURL);\n      }\n      if (context.options.query || context.options.params) {\n        context.request = withQuery(context.request, {\n          ...context.options.params,\n          ...context.options.query\n        });\n      }\n    }\n    if (context.options.body && isPayloadMethod(context.options.method)) {\n      if (isJSONSerializable(context.options.body)) {\n        context.options.body = typeof context.options.body === \"string\" ? context.options.body : JSON.stringify(context.options.body);\n        context.options.headers = new Headers(context.options.headers || {});\n        if (!context.options.headers.has(\"content-type\")) {\n          context.options.headers.set(\"content-type\", \"application/json\");\n        }\n        if (!context.options.headers.has(\"accept\")) {\n          context.options.headers.set(\"accept\", \"application/json\");\n        }\n      } else if (\n        // ReadableStream Body\n        \"pipeTo\" in context.options.body && typeof context.options.body.pipeTo === \"function\" || // Node.js Stream Body\n        typeof context.options.body.pipe === \"function\"\n      ) {\n        if (!(\"duplex\" in context.options)) {\n          context.options.duplex = \"half\";\n        }\n      }\n    }\n    if (!context.options.signal && context.options.timeout) {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), context.options.timeout);\n      context.options.signal = controller.signal;\n    }\n    try {\n      context.response = await fetch(\n        context.request,\n        context.options\n      );\n    } catch (error) {\n      context.error = error;\n      if (context.options.onRequestError) {\n        await context.options.onRequestError(context);\n      }\n      return await onError(context);\n    }\n    const hasBody = context.response.body && !nullBodyResponses.has(context.response.status) && context.options.method !== \"HEAD\";\n    if (hasBody) {\n      const responseType = (context.options.parseResponse ? \"json\" : context.options.responseType) || detectResponseType(context.response.headers.get(\"content-type\") || \"\");\n      switch (responseType) {\n        case \"json\": {\n          const data = await context.response.text();\n          const parseFunction = context.options.parseResponse || destr;\n          context.response._data = parseFunction(data);\n          break;\n        }\n        case \"stream\": {\n          context.response._data = context.response.body;\n          break;\n        }\n        default: {\n          context.response._data = await context.response[responseType]();\n        }\n      }\n    }\n    if (context.options.onResponse) {\n      await context.options.onResponse(context);\n    }\n    if (!context.options.ignoreResponseError && context.response.status >= 400 && context.response.status < 600) {\n      if (context.options.onResponseError) {\n        await context.options.onResponseError(context);\n      }\n      return await onError(context);\n    }\n    return context.response;\n  };\n  const $fetch = async function $fetch2(request, options) {\n    const r = await $fetchRaw(request, options);\n    return r._data;\n  };\n  $fetch.raw = $fetchRaw;\n  $fetch.native = (...args) => fetch(...args);\n  $fetch.create = (defaultOptions = {}) => createFetch({\n    ...globalOptions,\n    defaults: {\n      ...globalOptions.defaults,\n      ...defaultOptions\n    }\n  });\n  return $fetch;\n}\n\nexport { FetchError as F, createFetchError as a, createFetch as c };\n","import { c as createFetch } from './shared/ofetch.00501375.mjs';\nexport { F as FetchError, a as createFetchError } from './shared/ofetch.00501375.mjs';\nimport 'destr';\nimport 'ufo';\n\nconst _globalThis = function() {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw new Error(\"unable to locate global object\");\n}();\nconst fetch = _globalThis.fetch || (() => Promise.reject(new Error(\"[ofetch] global.fetch is not supported!\")));\nconst Headers = _globalThis.Headers;\nconst AbortController = _globalThis.AbortController;\nconst ofetch = createFetch({ fetch, Headers, AbortController });\nconst $fetch = ofetch;\n\nexport { $fetch, AbortController, Headers, createFetch, fetch, ofetch };\n","import type {CeremonyOptions, CeremonyOptionsWithoutPath } from \"./types\"\nimport {ofetch} from \"ofetch\"\nimport {mergeDeep, pull} from \"./utils\"\nimport {findTokenInCookie, findTokenInInput, findTokenInMeta, isCsrfToken} from \"./csrf\";\n\n/**\n * Check if the headers don't have a CSRF or XSRF token.\n */\nfunction missingToken(headers: Record<string, string>): boolean {\n    return ! Object.keys(headers)\n        .find((key: string): boolean => {\n            return ['x-csrf-token', 'x-xsrf-token'].includes(key.toLowerCase())\n                && !!headers[key]\n        })\n}\n\n/**\n * Pull the token configuration key out of the options\n */\nfunction pullTokenConfig(options: CeremonyOptionsWithoutPath): boolean|string {\n    return pull(options, \"findCsrfToken\") || pull(options, \"findXsrfToken\") as boolean|string\n}\n\n/**\n * Set the token in the headers if needed.\n */\nfunction setToken(token: string|boolean, headers: Record<string, string>): void {\n    // Find the token if the token is set to \"true\"\n    if (token === true && missingToken(headers)) {\n        token = findTokenInMeta() ?? findTokenInInput() ?? findTokenInCookie() ?? ''\n    }\n\n    // If the token is a string, add it verbatim to the header.\n    if (typeof token === \"string\") {\n        headers[isCsrfToken(token) ? 'X-CSRF-TOKEN' : 'X-XSRF-TOKEN'] = token\n    }\n}\n\nexport default async <T>(options: CeremonyOptions, webAuthnData: Object = {}): Promise<T> => {\n    const {path, ...fetchOptions} = options\n\n    fetchOptions.headers = fetchOptions.headers || {}\n\n    setToken(pullTokenConfig(options), fetchOptions.headers)\n\n    // @ts-ignore\n    fetchOptions.body = mergeDeep(fetchOptions.body ?? {}, webAuthnData)\n\n    return await ofetch<T>(path, fetchOptions)\n}\n","/**\n * Tries to find the CSRF token in cookies.\n */\nexport function findTokenInCookie(): string | undefined {\n    // Find a match for the CSRF-TOKEN or XSRF-TOKEN cookie, case-insensitive,\n    // as 3 groups: the whitespace preceding, the cooke name, and the value.\n    // If there is a match, decode the last group that contains the value.\n    const match: RegExpMatchArray|null = document.cookie.match(\n        new RegExp('(^|;\\\\s*)([CX]SRF-TOKEN)=([^;]*)', 'i')\n    );\n\n    return match ? decodeURIComponent(match[3]) : undefined;\n}\n\n/**\n * Find the CSRF token from a meta tag in the header.\n */\nexport function findTokenInMeta(): string | undefined {\n    return Array\n        .from(document.head.getElementsByTagName(\"meta\"))\n        .find((element: HTMLMetaElement): boolean => element.name.toLowerCase() === \"csrf-token\" && !!element.content)\n        ?.content\n}\n\n/**\n * Find the CSRF token from a meta input\n */\nexport function findTokenInInput(): string | undefined {\n    // Then, try to find a hidden input containing the CSRF token.\n    return Array\n        .from(document.body.getElementsByTagName(\"input\"))\n        .find((input: HTMLInputElement): boolean => {\n            return input.name.toLowerCase() === \"_token\"\n                && input.type.toLowerCase() === \"hidden\"\n                && !!input.value\n        })\n        ?.value\n}\n\n/**\n * Get the type of the token retrieved.\n */\nexport function isCsrfToken(token: string): boolean {\n    if (token.length < 40) {\n        const error = new Error(\"The token must be an CSRF (40 characters) or XSRF token.\")\n\n        error.name = 'InvalidToken'\n\n        throw error\n    }\n\n    return token.length === 40\n}\n","import type {\n    AssertionResult,\n    AttestationResult,\n    CeremonyOptionsWithoutPath,\n    CeremonyResultRaw,\n    Config,\n    ServerPublicKeyCredentialCreationOptions,\n    ServerPublicKeyCredentialRequestOptions,\n    Webpass,\n    WebpassStatic\n} from \"./types\"\nimport {isAutomatic, isManual, isNotAutomatic, isNotSupported, isSupported, isUnsupported} from \"./browser\"\nimport {isArrayBuffer, isObjectEmpty, mergeDeep, normalizeOptions} from \"./utils\"\nimport defaultConfig from \"./config\"\nimport wfetch from \"./wfetch\"\n\n/**\n * Parse the incoming credential creation options from the server, which is partially BASE64 URL encoded.\n */\nfunction parseServerCreationOptions(publicKey: ServerPublicKeyCredentialCreationOptions): PublicKeyCredentialCreationOptions {\n    return {\n        ...publicKey,\n        challenge: base64UrlToUint8Array(publicKey.challenge),\n        user: {...publicKey.user, id: base64UrlToUint8Array(publicKey.user.id)},\n        excludeCredentials: publicKey.excludeCredentials.map(data => ({...data, id: base64UrlToUint8Array(data.id)}))\n    }\n}\n\n/**\n * Parse the incoming credential request options from the server, which is partially BASE64 URL encoded.\n */\nfunction parseServerRequestOptions(publicKey: ServerPublicKeyCredentialRequestOptions): PublicKeyCredentialRequestOptions {\n    return {\n        ...publicKey,\n        challenge: base64UrlToUint8Array(publicKey.challenge),\n        allowCredentials: publicKey.allowCredentials.map(data => ({...data, id: base64UrlToUint8Array(data.id)}))\n    }\n}\n\n/**\n * Parses the outgoing credentials from the browser to the server.\n */\nfunction parseOutgoingCredentials(credentials: PublicKeyCredential | Credential): Record<string, any> {\n    // Copy all the credentials properties into a new object.\n    const response: Record<string, any> = Object.assign({}, credentials)\n\n    // Maintain future compatibility for WebAuthn 3.0 if some credential properties are already strings\n    if (\"rawId\" in credentials) {\n        response.rawId = isArrayBuffer(credentials.rawId)\n            ? arrayToBase64UrlString(credentials.rawId)\n            : credentials.rawId\n    }\n\n    if (\"response\" in credentials) {\n        // Forcefully transform all ArrayBuffers in the credentials response as BASE64 strings.\n        response.response = Object.fromEntries(\n            Object.entries(credentials.response).map(([index, value]): [string, string] => {\n                return [index, isArrayBuffer(value) ? arrayToBase64UrlString(value) : value]\n            })\n        )\n    }\n\n    return response;\n}\n\n/**\n * Transform a string into Uint8Array instance.\n */\nfunction base64UrlToUint8Array(input: string): Uint8Array {\n    // Pad the input and replace the safe characters to unsafe characters\n    input = (input + \"=\".repeat((4 - input.length % 4) % 4))\n        .replace(/-/g, \"+\")\n        .replace(/_/g, \"/\")\n\n    return new TextEncoder().encode(input)\n}\n\n/**\n * Encodes an array of bytes to a BASE64 URL string\n */\nfunction arrayToBase64UrlString(arrayBuffer: ArrayBuffer): string {\n    return btoa(new TextDecoder().decode(arrayBuffer))\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\")\n}\n\n/**\n * Create a new Error with a name and message.\n */\nfunction newError(name: string, message: string): Error {\n    const error = new Error(message)\n\n    error.name = name\n\n    return error\n}\n\n/**\n * Create a new Webpass instance.\n */\nfunction webpass(config: Partial<Config> = {}): Webpass {\n    // Merge the configuration\n    const currentConfig: Config = mergeDeep(structuredClone(defaultConfig), config)\n\n    /**\n     * Registers the device public key in the server and wraps the results in an object.\n     */\n    async function attest(options?: CeremonyOptionsWithoutPath | string, response?: CeremonyOptionsWithoutPath | string): Promise<AttestationResult> {\n        // Create the result we will return to the user on any scenario.\n        const result: AttestationResult = {\n            data: undefined,\n            credentials: undefined,\n            id: undefined,\n            success: false,\n            error: undefined\n        }\n\n        // Retrieve the attestation options from the server\n        try {\n            result.data = result.credentials = await attestRaw(options, response)\n        } catch (error) {\n            return {...result, error}\n        } finally {\n            result.success = result.error === undefined\n        }\n\n        // Here we will just short-circuit the ID from the response as convenience, if it exists.\n        if (typeof result.data === \"object\") {\n            result.id = result.data?.id || result.data?.uuid\n        }\n\n        return result\n    }\n\n    /**\n     * Registers the device public key in the server.\n     */\n    async function attestRaw(options?: CeremonyOptionsWithoutPath | string, response?: CeremonyOptionsWithoutPath | string): Promise<CeremonyResultRaw> {\n        // Normalize the arguments\n        const normalizedOptions = normalizeOptions(options, currentConfig, \"attestOptions\")\n        const normalizedResponseOptions = normalizeOptions(response, currentConfig, \"attest\")\n\n        // Retrieve the attestation options from the server\n        const attestationOptions: ServerPublicKeyCredentialCreationOptions | undefined = await wfetch<ServerPublicKeyCredentialCreationOptions | undefined>(normalizedOptions)\n\n        // If the response is empty, bail out\n        if (!attestationOptions || isObjectEmpty(attestationOptions)) {\n            throw newError(\"InvalidAttestationResponse\", \"The server responded with invalid or empty credential creation options.\")\n        }\n\n        const credentials: Credential | null = await navigator.credentials.create({\n            publicKey: parseServerCreationOptions(attestationOptions)\n        })\n\n        // If the user denied the permission, throw an error.\n        if (!credentials || isObjectEmpty(credentials)) {\n            throw newError(\"AttestationCancelled\", \"The credentials creation was cancelled by the user or a timeout.\")\n        }\n\n        return await wfetch<Record<string, any>>(normalizedResponseOptions, parseOutgoingCredentials(credentials))\n    }\n\n    /**\n     * Assert a WebAuthn challenge, returns the user and token or null.\n     */\n    async function assert(options?: CeremonyOptionsWithoutPath | string, response?: CeremonyOptionsWithoutPath | string): Promise<AssertionResult> {\n        // Create the result we will return to the user on any scenario.\n        const result: AssertionResult = {\n            data: undefined,\n            user: undefined,\n            token: undefined,\n            success: false,\n            error: undefined\n        }\n\n        // Get the assertion challenge from the server\n        try {\n            result.data = await assertRaw(options, response)\n        } catch (error) {\n            return {...result, error}\n        } finally {\n            result.success = result.error === undefined\n        }\n\n        // Try to set the user and token from the data received, or just the token if it's a string.\n        if (typeof result.data === \"object\") {\n            result.user = typeof result.data.user === \"object\" ? result.data.user : result.data\n            result.token = result.data?.token || result.data?.jwt\n\n            // If we couldn't get the token, try the user object if it is an object\n            if (!result.token && typeof result.user === \"object\") {\n                result.token = result.user?.token || result.user?.jwt\n            }\n        } else if (typeof result.data === \"string\") {\n            result.token = result.data\n        }\n\n        return result\n    }\n\n    /**\n     * Assert a WebAuthn challenge, returns the user and token or null.\n     */\n    async function assertRaw(options?: CeremonyOptionsWithoutPath | string, response?: CeremonyOptionsWithoutPath | string): Promise<CeremonyResultRaw> {\n        // Normalize the arguments\n        const normalizedOptions = normalizeOptions(options, currentConfig, \"assertOptions\")\n        const normalizedResponseOptions = normalizeOptions(response, currentConfig, \"assert\")\n\n        // Get the assertion challenge from the server\n        const assertionOptions: ServerPublicKeyCredentialRequestOptions | undefined = await wfetch<ServerPublicKeyCredentialRequestOptions | undefined>(normalizedOptions)\n\n        // If we didn't receive anything, return it as an invalid server message.\n        if (!assertionOptions || isObjectEmpty(assertionOptions)) {\n            throw newError(\"InvalidAssertionResponse\", \"The server responded with invalid or empty credential request options.\")\n        }\n\n        // Let the browser sign the challenge with a credential, returning a response\n        const credentials: Credential | null = await navigator.credentials.get({\n            publicKey: parseServerRequestOptions(assertionOptions)\n        })\n\n        // If the user denied the permission, return null\n        if (!credentials) {\n            throw newError(\"AssertionCancelled\", \"The credentials request was cancelled by the user or timeout.\")\n        }\n\n        // Expect an authentication response from the server with the user, credentials, or anything.\n        return await wfetch<Record<string, string>>(normalizedResponseOptions, parseOutgoingCredentials(credentials))\n    }\n\n    return {\n        assert,\n        attest,\n        assertRaw,\n        attestRaw,\n    }\n}\n\nexport default {\n    create: webpass,\n    attest: async (options?, response?) => await (webpass()).attest(options, response),\n    assert: async (options?, response?) => await (webpass()).assert(options, response),\n    attestRaw: async (options?, response?) => await (webpass()).attestRaw(options, response),\n    assertRaw: async (options?, response?) => await (webpass()).assertRaw(options, response),\n    isSupported,\n    isNotSupported,\n    isUnsupported,\n    isAutomatic,\n    isNotAutomatic,\n    isManual\n} as WebpassStatic\n"],"names":["async","isSupported","callback","window","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","isAutomatic","isConditionalMediationAvailable","pull","object","key","extracted","isArrayBuffer","value","ArrayBuffer","Uint8Array","Array","isArray","isObjectEmpty","Object","keys","length","mergeDeep","target","source","isObject","output","assign","forEach","obj","normalizeOptions","options","config","defaultPathKey","routes","path","baseURL","location","origin","body","method","headers","redirect","credentials","defaultConfig","undefined","findCsrfToken","findXsrfToken","attestOptions","attest","assertOptions","assert","Accept","suspectProtoRx","suspectConstructorRx","JsonSigRx","jsonParseTransform","console","warn","warnKeyDropped","destr","_value","trim","at","includes","slice","_lval","toLowerCase","Number","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","test","strict","SyntaxError","Error","JSON","parse","error","HASH_RE","AMPERSAND_RE","EQUAL_RE","PLUS_RE","ENC_CARET_RE","ENC_BACKTICK_RE","ENC_PIPE_RE","ENC_SPACE_RE","encodeQueryValue","input","text","stringify","encodeURI","replace","encodeQueryKey","decode","decodeURIComponent","decodeQueryValue","parseQuery","parametersString","parameter","split","s","match","push","stringifyQuery","query","filter","k","map","encodeQueryItem","String","join","Boolean","PROTOCOL_STRICT_REGEX","PROTOCOL_REGEX","PROTOCOL_RELATIVE_REGEX","hasProtocol","inputString","opts","acceptRelative","TRAILING_SLASH_RE","hasTrailingSlash","respectQueryAndFragment","endsWith","withTrailingSlash","fragment","fragmentIndex","indexOf","s0","withBase","base","url","_base","withoutTrailingSlash","startsWith","segment","url2","isNonEmptyURL","_segment","JOIN_LEADING_SLASH_RE","joinURL","withQuery","parsed","parseURL","mergedQuery","search","pathname","hash","auth","host","proto","protocol","stringifyParsedURL","defaultProto","_specialProtoMatch","_proto","_pathname","href","parsePath","hostAndPath","Math","max","splice","FetchError","constructor","message","super","this","name","cause","payloadMethods","Set","freeze","isPayloadMethod","has","toUpperCase","textTypes","JSON_RE","mergeFetchOptions","defaults","Headers","globalThis","merged","params","set","retryStatusCodes","nullBodyResponses","_globalThis","self","global","ofetch","createFetch","globalOptions","fetch","AbortController","onError","context","isAbort","timeout","retry","retries","responseCode","response","status","retryDelay","Promise","resolve","setTimeout","$fetchRaw","request","ctx","errorMessage","toString","requestStr","statusStr","statusText","fetchError","defineProperty","get","refKey","createFetchError","captureStackTrace","_request","_options","onRequest","t","buffer","toJSON","isJSONSerializable","pipeTo","pipe","duplex","signal","controller","abort","onRequestError","responseType","parseResponse","_contentType","contentType","shift","detectResponseType","data","parseFunction","_data","onResponse","ignoreResponseError","onResponseError","$fetch","raw","native","args","create","defaultOptions","reject","setToken","token","find","missingToken","from","document","head","getElementsByTagName","element","content","type","cookie","RegExp","findTokenInCookie","isCsrfToken","wfetch","webAuthnData","fetchOptions","pullTokenConfig","parseOutgoingCredentials","rawId","arrayToBase64UrlString","fromEntries","entries","index","base64UrlToUint8Array","repeat","TextEncoder","encode","arrayBuffer","btoa","TextDecoder","newError","webpass","currentConfig","structuredClone","attestRaw","normalizedOptions","normalizedResponseOptions","attestationOptions","navigator","publicKey","challenge","user","id","excludeCredentials","assertRaw","assertionOptions","allowCredentials","result","success","jwt","uuid","Webpass","isNotSupported","isUnsupported","isNotAutomatic","isManual"],"mappings":"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","x_google_ignoreList":[3,4,5,6]}